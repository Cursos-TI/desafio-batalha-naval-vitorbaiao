#include <stdio.h>
#include <stdlib.h> // Necessário para abs()

#define TAM_TABULEIRO 10
#define TAM_HABILIDADE 5
#define TAM_NAVIO 3

// Função para inicializar tabuleiro com 0 (água)
void inicializarTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    for(int i = 0; i < TAM_TABULEIRO; i++) {
        for(int j = 0; j < TAM_TABULEIRO; j++) {
            tabuleiro[i][j] = 0;
        }
    }
}

// Função para posicionar um navio horizontal no tabuleiro
void posicionarNavioHorizontal(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int coluna) {
    for(int c = coluna; c < coluna + TAM_NAVIO; c++) {
        if (c < TAM_TABULEIRO) {
            tabuleiro[linha][c] = 3;
        }
    }
}

// Função para posicionar um navio vertical no tabuleiro
void posicionarNavioVertical(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int coluna) {
    for(int l = linha; l < linha + TAM_NAVIO; l++) {
        if (l < TAM_TABULEIRO) {
            tabuleiro[l][coluna] = 3;
        }
    }
}

// Preenche matriz de habilidade Cone (5x5)
void criarHabilidadeCone(int habilidade[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for(int i = 0; i < TAM_HABILIDADE; i++) {
        for(int j = 0; j < TAM_HABILIDADE; j++) {
            int centro = TAM_HABILIDADE / 2;
            if(i == 0 && j == centro) {
                habilidade[i][j] = 1;
            } else if(i == 1 && (j >= centro - 1 && j <= centro + 1)) {
                habilidade[i][j] = 1;
            } else if(i == 2 && (j >= centro - 2 && j <= centro + 2)) {
                habilidade[i][j] = 1;
            } else {
                habilidade[i][j] = 0;
            }
        }
    }
}

// Preenche matriz de habilidade Cruz (5x5)
void criarHabilidadeCruz(int habilidade[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int centro = TAM_HABILIDADE / 2;
    for(int i = 0; i < TAM_HABILIDADE; i++) {
        for(int j = 0; j < TAM_HABILIDADE; j++) {
            habilidade[i][j] = (i == centro || j == centro) ? 1 : 0;
        }
    }
}

// Preenche matriz de habilidade Octaedro (5x5)
void criarHabilidadeOctaedro(int habilidade[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int centro = TAM_HABILIDADE / 2;
    for(int i = 0; i < TAM_HABILIDADE; i++) {
        for(int j = 0; j < TAM_HABILIDADE; j++) {
            int dist = abs(i - centro) + abs(j - centro);
            habilidade[i][j] = (dist <= 2) ? 1 : 0;
        }
    }
}

// Aplica habilidade no tabuleiro
void aplicarHabilidade(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO],
                       int habilidade[TAM_HABILIDADE][TAM_HABILIDADE],
                       int origemLinha, int origemColuna) {
    int centro = TAM_HABILIDADE / 2;

    for(int i = 0; i < TAM_HABILIDADE; i++) {
        for(int j = 0; j < TAM_HABILIDADE; j++) {
            if(habilidade[i][j] == 1) {
                int tabLinha = origemLinha + (i - centro);
                int tabColuna = origemColuna + (j - centro);

                if(tabLinha >= 0 && tabLinha < TAM_TABULEIRO &&
                   tabColuna >= 0 && tabColuna < TAM_TABULEIRO) {
                    tabuleiro[tabLinha][tabColuna] = 5;
                }
            }
        }
    }
}

// Imprime o tabuleiro
void imprimirTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    printf("Tabuleiro Batalha Naval:\n");
    printf("0=agua  3=navio  5=habilidade\n\n");

    for(int i = 0; i < TAM_TABULEIRO; i++) {
        for(int j = 0; j < TAM_TABULEIRO; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO];
    inicializarTabuleiro(tabuleiro);

    // Posicionar navios
    posicionarNavioHorizontal(tabuleiro, 1, 1);
    posicionarNavioVertical(tabuleiro, 4, 7);

    // Criar habilidades
    int cone[TAM_HABILIDADE][TAM_HABILIDADE];
    int cruz[TAM_HABILIDADE][TAM_HABILIDADE];
    int octaedro[TAM_HABILIDADE][TAM_HABILIDADE];

    criarHabilidadeCone(cone);
    criarHabilidadeCruz(cruz);
    criarHabilidadeOctaedro(octaedro);

    // Aplicar habilidades
    aplicarHabilidade(tabuleiro, cone, 2, 2);
    aplicarHabilidade(tabuleiro, cruz, 5, 5);
    aplicarHabilidade(tabuleiro, octaedro, 7, 7);

    // Mostrar resultado
    imprimirTabuleiro(tabuleiro);

    return 0;
}